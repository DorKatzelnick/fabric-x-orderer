// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/hyperledger/fabric-x-orderer/common/requestfilter"
)

type FakeFilterConfig struct {
	GetMaxSizeBytesStub        func() (uint64, error)
	getMaxSizeBytesMutex       sync.RWMutex
	getMaxSizeBytesArgsForCall []struct {
	}
	getMaxSizeBytesReturns struct {
		result1 uint64
		result2 error
	}
	getMaxSizeBytesReturnsOnCall map[int]struct {
		result1 uint64
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeFilterConfig) GetMaxSizeBytes() (uint64, error) {
	fake.getMaxSizeBytesMutex.Lock()
	ret, specificReturn := fake.getMaxSizeBytesReturnsOnCall[len(fake.getMaxSizeBytesArgsForCall)]
	fake.getMaxSizeBytesArgsForCall = append(fake.getMaxSizeBytesArgsForCall, struct {
	}{})
	stub := fake.GetMaxSizeBytesStub
	fakeReturns := fake.getMaxSizeBytesReturns
	fake.recordInvocation("GetMaxSizeBytes", []interface{}{})
	fake.getMaxSizeBytesMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeFilterConfig) GetMaxSizeBytesCallCount() int {
	fake.getMaxSizeBytesMutex.RLock()
	defer fake.getMaxSizeBytesMutex.RUnlock()
	return len(fake.getMaxSizeBytesArgsForCall)
}

func (fake *FakeFilterConfig) GetMaxSizeBytesCalls(stub func() (uint64, error)) {
	fake.getMaxSizeBytesMutex.Lock()
	defer fake.getMaxSizeBytesMutex.Unlock()
	fake.GetMaxSizeBytesStub = stub
}

func (fake *FakeFilterConfig) GetMaxSizeBytesReturns(result1 uint64, result2 error) {
	fake.getMaxSizeBytesMutex.Lock()
	defer fake.getMaxSizeBytesMutex.Unlock()
	fake.GetMaxSizeBytesStub = nil
	fake.getMaxSizeBytesReturns = struct {
		result1 uint64
		result2 error
	}{result1, result2}
}

func (fake *FakeFilterConfig) GetMaxSizeBytesReturnsOnCall(i int, result1 uint64, result2 error) {
	fake.getMaxSizeBytesMutex.Lock()
	defer fake.getMaxSizeBytesMutex.Unlock()
	fake.GetMaxSizeBytesStub = nil
	if fake.getMaxSizeBytesReturnsOnCall == nil {
		fake.getMaxSizeBytesReturnsOnCall = make(map[int]struct {
			result1 uint64
			result2 error
		})
	}
	fake.getMaxSizeBytesReturnsOnCall[i] = struct {
		result1 uint64
		result2 error
	}{result1, result2}
}

func (fake *FakeFilterConfig) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeFilterConfig) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ requestfilter.FilterConfig = new(FakeFilterConfig)
