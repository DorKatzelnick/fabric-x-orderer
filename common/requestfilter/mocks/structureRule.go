// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/hyperledger/fabric-protos-go-apiv2/common"
	"github.com/hyperledger/fabric-x-orderer/common/requestfilter"
	"github.com/hyperledger/fabric-x-orderer/node/protos/comm"
)

type FakeStructureRule struct {
	UpdateStub        func(requestfilter.FilterConfig) error
	updateMutex       sync.RWMutex
	updateArgsForCall []struct {
		arg1 requestfilter.FilterConfig
	}
	updateReturns struct {
		result1 error
	}
	updateReturnsOnCall map[int]struct {
		result1 error
	}
	VerifyAndClassifyStub        func(*comm.Request) (common.HeaderType, error)
	verifyAndClassifyMutex       sync.RWMutex
	verifyAndClassifyArgsForCall []struct {
		arg1 *comm.Request
	}
	verifyAndClassifyReturns struct {
		result1 common.HeaderType
		result2 error
	}
	verifyAndClassifyReturnsOnCall map[int]struct {
		result1 common.HeaderType
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeStructureRule) Update(arg1 requestfilter.FilterConfig) error {
	fake.updateMutex.Lock()
	ret, specificReturn := fake.updateReturnsOnCall[len(fake.updateArgsForCall)]
	fake.updateArgsForCall = append(fake.updateArgsForCall, struct {
		arg1 requestfilter.FilterConfig
	}{arg1})
	stub := fake.UpdateStub
	fakeReturns := fake.updateReturns
	fake.recordInvocation("Update", []interface{}{arg1})
	fake.updateMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeStructureRule) UpdateCallCount() int {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	return len(fake.updateArgsForCall)
}

func (fake *FakeStructureRule) UpdateCalls(stub func(requestfilter.FilterConfig) error) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = stub
}

func (fake *FakeStructureRule) UpdateArgsForCall(i int) requestfilter.FilterConfig {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	argsForCall := fake.updateArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeStructureRule) UpdateReturns(result1 error) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = nil
	fake.updateReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeStructureRule) UpdateReturnsOnCall(i int, result1 error) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = nil
	if fake.updateReturnsOnCall == nil {
		fake.updateReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeStructureRule) VerifyAndClassify(arg1 *comm.Request) (common.HeaderType, error) {
	fake.verifyAndClassifyMutex.Lock()
	ret, specificReturn := fake.verifyAndClassifyReturnsOnCall[len(fake.verifyAndClassifyArgsForCall)]
	fake.verifyAndClassifyArgsForCall = append(fake.verifyAndClassifyArgsForCall, struct {
		arg1 *comm.Request
	}{arg1})
	stub := fake.VerifyAndClassifyStub
	fakeReturns := fake.verifyAndClassifyReturns
	fake.recordInvocation("VerifyAndClassify", []interface{}{arg1})
	fake.verifyAndClassifyMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeStructureRule) VerifyAndClassifyCallCount() int {
	fake.verifyAndClassifyMutex.RLock()
	defer fake.verifyAndClassifyMutex.RUnlock()
	return len(fake.verifyAndClassifyArgsForCall)
}

func (fake *FakeStructureRule) VerifyAndClassifyCalls(stub func(*comm.Request) (common.HeaderType, error)) {
	fake.verifyAndClassifyMutex.Lock()
	defer fake.verifyAndClassifyMutex.Unlock()
	fake.VerifyAndClassifyStub = stub
}

func (fake *FakeStructureRule) VerifyAndClassifyArgsForCall(i int) *comm.Request {
	fake.verifyAndClassifyMutex.RLock()
	defer fake.verifyAndClassifyMutex.RUnlock()
	argsForCall := fake.verifyAndClassifyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeStructureRule) VerifyAndClassifyReturns(result1 common.HeaderType, result2 error) {
	fake.verifyAndClassifyMutex.Lock()
	defer fake.verifyAndClassifyMutex.Unlock()
	fake.VerifyAndClassifyStub = nil
	fake.verifyAndClassifyReturns = struct {
		result1 common.HeaderType
		result2 error
	}{result1, result2}
}

func (fake *FakeStructureRule) VerifyAndClassifyReturnsOnCall(i int, result1 common.HeaderType, result2 error) {
	fake.verifyAndClassifyMutex.Lock()
	defer fake.verifyAndClassifyMutex.Unlock()
	fake.VerifyAndClassifyStub = nil
	if fake.verifyAndClassifyReturnsOnCall == nil {
		fake.verifyAndClassifyReturnsOnCall = make(map[int]struct {
			result1 common.HeaderType
			result2 error
		})
	}
	fake.verifyAndClassifyReturnsOnCall[i] = struct {
		result1 common.HeaderType
		result2 error
	}{result1, result2}
}

func (fake *FakeStructureRule) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeStructureRule) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ requestfilter.StructureRule = new(FakeStructureRule)
