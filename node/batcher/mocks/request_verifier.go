// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/hyperledger/fabric-protos-go-apiv2/common"
	"github.com/hyperledger/fabric-x-orderer/node/batcher"
	"github.com/hyperledger/fabric-x-orderer/node/protos/comm"
)

type FakeRequestVerifier struct {
	VerifyStub        func(*comm.Request) error
	verifyMutex       sync.RWMutex
	verifyArgsForCall []struct {
		arg1 *comm.Request
	}
	verifyReturns struct {
		result1 error
	}
	verifyReturnsOnCall map[int]struct {
		result1 error
	}
	VerifyStructureAndClassifyStub        func(*comm.Request) (common.HeaderType, error)
	verifyStructureAndClassifyMutex       sync.RWMutex
	verifyStructureAndClassifyArgsForCall []struct {
		arg1 *comm.Request
	}
	verifyStructureAndClassifyReturns struct {
		result1 common.HeaderType
		result2 error
	}
	verifyStructureAndClassifyReturnsOnCall map[int]struct {
		result1 common.HeaderType
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRequestVerifier) Verify(arg1 *comm.Request) error {
	fake.verifyMutex.Lock()
	ret, specificReturn := fake.verifyReturnsOnCall[len(fake.verifyArgsForCall)]
	fake.verifyArgsForCall = append(fake.verifyArgsForCall, struct {
		arg1 *comm.Request
	}{arg1})
	stub := fake.VerifyStub
	fakeReturns := fake.verifyReturns
	fake.recordInvocation("Verify", []interface{}{arg1})
	fake.verifyMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRequestVerifier) VerifyCallCount() int {
	fake.verifyMutex.RLock()
	defer fake.verifyMutex.RUnlock()
	return len(fake.verifyArgsForCall)
}

func (fake *FakeRequestVerifier) VerifyCalls(stub func(*comm.Request) error) {
	fake.verifyMutex.Lock()
	defer fake.verifyMutex.Unlock()
	fake.VerifyStub = stub
}

func (fake *FakeRequestVerifier) VerifyArgsForCall(i int) *comm.Request {
	fake.verifyMutex.RLock()
	defer fake.verifyMutex.RUnlock()
	argsForCall := fake.verifyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRequestVerifier) VerifyReturns(result1 error) {
	fake.verifyMutex.Lock()
	defer fake.verifyMutex.Unlock()
	fake.VerifyStub = nil
	fake.verifyReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRequestVerifier) VerifyReturnsOnCall(i int, result1 error) {
	fake.verifyMutex.Lock()
	defer fake.verifyMutex.Unlock()
	fake.VerifyStub = nil
	if fake.verifyReturnsOnCall == nil {
		fake.verifyReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.verifyReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRequestVerifier) VerifyStructureAndClassify(arg1 *comm.Request) (common.HeaderType, error) {
	fake.verifyStructureAndClassifyMutex.Lock()
	ret, specificReturn := fake.verifyStructureAndClassifyReturnsOnCall[len(fake.verifyStructureAndClassifyArgsForCall)]
	fake.verifyStructureAndClassifyArgsForCall = append(fake.verifyStructureAndClassifyArgsForCall, struct {
		arg1 *comm.Request
	}{arg1})
	stub := fake.VerifyStructureAndClassifyStub
	fakeReturns := fake.verifyStructureAndClassifyReturns
	fake.recordInvocation("VerifyStructureAndClassify", []interface{}{arg1})
	fake.verifyStructureAndClassifyMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRequestVerifier) VerifyStructureAndClassifyCallCount() int {
	fake.verifyStructureAndClassifyMutex.RLock()
	defer fake.verifyStructureAndClassifyMutex.RUnlock()
	return len(fake.verifyStructureAndClassifyArgsForCall)
}

func (fake *FakeRequestVerifier) VerifyStructureAndClassifyCalls(stub func(*comm.Request) (common.HeaderType, error)) {
	fake.verifyStructureAndClassifyMutex.Lock()
	defer fake.verifyStructureAndClassifyMutex.Unlock()
	fake.VerifyStructureAndClassifyStub = stub
}

func (fake *FakeRequestVerifier) VerifyStructureAndClassifyArgsForCall(i int) *comm.Request {
	fake.verifyStructureAndClassifyMutex.RLock()
	defer fake.verifyStructureAndClassifyMutex.RUnlock()
	argsForCall := fake.verifyStructureAndClassifyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRequestVerifier) VerifyStructureAndClassifyReturns(result1 common.HeaderType, result2 error) {
	fake.verifyStructureAndClassifyMutex.Lock()
	defer fake.verifyStructureAndClassifyMutex.Unlock()
	fake.VerifyStructureAndClassifyStub = nil
	fake.verifyStructureAndClassifyReturns = struct {
		result1 common.HeaderType
		result2 error
	}{result1, result2}
}

func (fake *FakeRequestVerifier) VerifyStructureAndClassifyReturnsOnCall(i int, result1 common.HeaderType, result2 error) {
	fake.verifyStructureAndClassifyMutex.Lock()
	defer fake.verifyStructureAndClassifyMutex.Unlock()
	fake.VerifyStructureAndClassifyStub = nil
	if fake.verifyStructureAndClassifyReturnsOnCall == nil {
		fake.verifyStructureAndClassifyReturnsOnCall = make(map[int]struct {
			result1 common.HeaderType
			result2 error
		})
	}
	fake.verifyStructureAndClassifyReturnsOnCall[i] = struct {
		result1 common.HeaderType
		result2 error
	}{result1, result2}
}

func (fake *FakeRequestVerifier) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRequestVerifier) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ batcher.RequestVerifier = new(FakeRequestVerifier)
